logging {
  level = "info"
  format = "logfmt"
}

///////////////////////
// METRICS PIPELINE //
///////////////////////

discovery.kubernetes "pods" {
  role = "pod"
}

// discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
// If no rules are defined, then the input targets are exported as-is.
discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pods.targets

  // Label creation - "namespace" field from "__meta_kubernetes_namespace"
  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }

  // Label creation - "pod" field from "__meta_kubernetes_pod_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }

  // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }

  // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    action = "replace"
    target_label = "app"
  }

  // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
  // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "job"
    separator = "/"
    replacement = "$1"
  }

  // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
  // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "__path__"
    separator = "/"
    replacement = "/var/log/pods/*$1/*.log"
  }

  // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
  rule {
    source_labels = ["__meta_kubernetes_pod_container_id"]
    action = "replace"
    target_label = "container_runtime"
    regex = "^(\\S+):\\/\\/.+$"
    replacement = "$1"
  }
}

prometheus.scrape "pods" {
  targets    = discovery.kubernetes.pods.targets
  forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.remote_write "default" {
  endpoint {
    url = "http://mimir-nginx.observability.svc.cluster.local/api/v1/push"
    headers = {
      "X-Scope-OrgID" = "demo",
    }
  }
}

prometheus.scrape "cadvisor" {
  targets = [
    {
      __address__ = "localhost:10250",
      job         = "kubelet",
    },
  ]

  scheme = "https"

  tls_config {
    insecure_skip_verify = true
  }

  bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

  forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.scrape "kubestatemetrics" {
  targets = [
    {
      __address__ = "kube-state-metrics.kube-system.svc.cluster.local:8080",
      job         = "kube-state-metrics",
    },
  ]
  forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.scrape "opencost" {
  targets = [
    {
      __address__ = "opencost.observability.svc.cluster.local:9003", 
      job         = "opencost",
    },
  ]
  forward_to = [prometheus.remote_write.default.receiver]
}


discovery.kubernetes "kepler_pods" {
  role = "pod"
}

prometheus.scrape "kepler" {
  targets = discovery.kubernetes.kepler_pods.targets
  forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.scrape "keplerstatic" {
  targets = [
    {
      __address__ = "kepler.observability.svc.cluster.local:9102",
      job         = "kepler",
    },
  ]

  forward_to = [prometheus.remote_write.default.receiver]
}


////////////////////
// LOGS: K8s PODS //
////////////////////

loki.source.kubernetes "default" {
  targets = discovery.relabel.pod_logs.output
  forward_to = [loki.process.k8s.receiver]
}

loki.process "k8s" {
  stage.static_labels {
    values = {
      cluster = "demo",
    }
  }

  forward_to = [loki.write.default.receiver]
}

////////////////////////////
// LOGS: FASTAPI BACKEND //
////////////////////////////

local.file_match "backend_logs" {
  path_targets = [
    { "__path__" = "/app-logs/backend.log" },
  ]
}

loki.source.file "backend" {
  targets    = local.file_match.backend_logs.targets
  forward_to = [loki.process.backend.receiver]
}

loki.process "backend" {
  stage.json {
    expressions = {
      level     = "level",
      timestamp = "timestamp",
      event     = "event",
      logger    = "logger",
    }
  }

  // stage.labels {
  //   values = {
  //     app  = "fastapi-backend",
  //     file = "backend.log",
  //   }
  // }

  forward_to = [loki.write.default.receiver]
}

///////////////////////
// LOG WRITE TARGET //
///////////////////////

loki.write "default" {
  endpoint {
    url = "http://loki-gateway.observability.svc.cluster.local/loki/api/v1/push"
  }
}

///////////////////////
// TRACE EXPORT //
///////////////////////


otelcol.receiver.otlp "otlp_receiver" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }
  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    traces = [otelcol.exporter.otlp.tempo.input,]
  }
}

otelcol.exporter.otlp "tempo" {
  client {
    endpoint = "tempo.observability.svc.cluster.local:4317"
    tls {
      insecure = true
    }
  }
}

