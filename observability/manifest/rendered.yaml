---
# Source: grafana/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: false
metadata:
  labels:
    helm.sh/chart: grafana-9.2.9
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-grafana
    app.kubernetes.io/version: "12.0.2"
  name: my-grafana
  namespace: monitoring
---
# Source: grafana/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-grafana
  namespace: monitoring
  labels:
    helm.sh/chart: grafana-9.2.9
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-grafana
    app.kubernetes.io/version: "12.0.2"
type: Opaque
data:
  
  admin-user: "YWRtaW4="
  admin-password: "NlFPTVlEUlY1ZVQzejJnM1dWYnVNUjlpbUZMRFpxNWtLOGdORUdLOA=="
  ldap-toml: ""
---
# Source: grafana/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-grafana
  namespace: monitoring
  labels:
    helm.sh/chart: grafana-9.2.9
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-grafana
    app.kubernetes.io/version: "12.0.2"
data:
  
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [server]
    domain = ''
---
# Source: grafana/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: grafana-9.2.9
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-grafana
    app.kubernetes.io/version: "12.0.2"
  name: my-grafana-clusterrole
rules: []
---
# Source: grafana/templates/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: my-grafana-clusterrolebinding
  labels:
    helm.sh/chart: grafana-9.2.9
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-grafana
    app.kubernetes.io/version: "12.0.2"
subjects:
  - kind: ServiceAccount
    name: my-grafana
    namespace: monitoring
roleRef:
  kind: ClusterRole
  name: my-grafana-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: grafana/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: my-grafana
  namespace: monitoring
  labels:
    helm.sh/chart: grafana-9.2.9
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-grafana
    app.kubernetes.io/version: "12.0.2"
rules: []
---
# Source: grafana/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: my-grafana
  namespace: monitoring
  labels:
    helm.sh/chart: grafana-9.2.9
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-grafana
    app.kubernetes.io/version: "12.0.2"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: my-grafana
subjects:
- kind: ServiceAccount
  name: my-grafana
  namespace: monitoring
---
# Source: grafana/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-grafana
  namespace: monitoring
  labels:
    helm.sh/chart: grafana-9.2.9
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-grafana
    app.kubernetes.io/version: "12.0.2"
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-grafana
---
# Source: grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-grafana
  namespace: monitoring
  labels:
    helm.sh/chart: grafana-9.2.9
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-grafana
    app.kubernetes.io/version: "12.0.2"
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: my-grafana
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: grafana-9.2.9
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: my-grafana
        app.kubernetes.io/version: "12.0.2"
      annotations:
        checksum/config: 0e9cbd0ea8e24e32f7dfca5bab17a2ba05652642f0a09a4882833ae88e4cc4a3
        checksum/sc-dashboard-provider-config: e70bf6a851099d385178a76de9757bb0bef8299da6d8443602590e44f05fdf24
        checksum/secret: 4776a82a0c5bd476a0db05b3a66adbb5db45a48744bd117d861f90ebe183123b
        kubectl.kubernetes.io/default-container: grafana
    spec:
      
      serviceAccountName: my-grafana
      automountServiceAccountToken: true
      shareProcessNamespace: false
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      enableServiceLinks: true
      containers:
        - name: grafana
          image: "docker.io/grafana/grafana:12.0.2"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
            - name: gossip-tcp
              containerPort: 9094
              protocol: TCP
            - name: gossip-udp
              containerPort: 9094
              protocol: UDP
            - name: profiling
              containerPort: 6060
              protocol: TCP
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: my-grafana
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-grafana
                  key: admin-password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
      volumes:
        - name: config
          configMap:
            name: my-grafana
        - name: storage
          emptyDir: {}
---
# Source: grafana/templates/tests/test-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: grafana-9.2.9
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-grafana
    app.kubernetes.io/version: "12.0.2"
  name: my-grafana-test
  namespace: monitoring
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
---
# Source: grafana/templates/tests/test-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-grafana-test
  namespace: monitoring
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    helm.sh/chart: grafana-9.2.9
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-grafana
    app.kubernetes.io/version: "12.0.2"
data:
  run.sh: |-
    @test "Test Health" {
      url="http://my-grafana/api/health"

      code=$(wget --server-response --spider --timeout 90 --tries 10 ${url} 2>&1 | awk '/^  HTTP/{print $2}')
      [ "$code" == "200" ]
    }
---
# Source: grafana/templates/tests/test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-grafana-test
  labels:
    helm.sh/chart: grafana-9.2.9
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: my-grafana
    app.kubernetes.io/version: "12.0.2"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  namespace: monitoring
spec:
  serviceAccountName: my-grafana-test
  containers:
    - name: my-grafana-test
      image: "docker.io/bats/bats:v1.4.1"
      imagePullPolicy: "IfNotPresent"
      command: ["/opt/bats/bin/bats", "-t", "/tests/run.sh"]
      volumeMounts:
        - mountPath: /tests
          name: tests
          readOnly: true
  volumes:
    - name: tests
      configMap:
        name: my-grafana-test
  restartPolicy: Never
